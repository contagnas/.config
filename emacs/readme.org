* emacs config

** toc :toc_4_gh:
:PROPERTIES:
:VISIBILITY: all
:END:
- [[#emacs-config][emacs config]]
  - [[#setup][setup]]
    - [[#early-init][early-init]]
      - [[#performance-hacks][performance hacks]]
      - [[#packageel][package.el]]
      - [[#ui][ui]]
    - [[#org-tangling][org tangling]]
    - [[#install-elpaca][install elpaca]]
  - [[#general][general]]
    - [[#config][config]]
      - [[#leader][leader]]
      - [[#buffers][buffers]]
      - [[#files][files]]
      - [[#windows][windows]]
      - [[#project][project]]
      - [[#quit][quit]]
      - [[#vim-completion][vim completion]]
      - [[#backup-files][backup files]]
  - [[#evil][evil]]
    - [[#evil-collection][evil-collection]]
    - [[#evil-surround][evil-surround]]
  - [[#which-key][which-key]]
  - [[#emacs][emacs]]
    - [[#ansi-mode][ansi-mode]]
  - [[#magit][magit]]
  - [[#org][org]]
  - [[#savehist][savehist]]
  - [[#vertco][vert&co]]
    - [[#vertico][vertico]]
    - [[#consult][consult]]
    - [[#marginalia][marginalia]]
    - [[#embark][embark]]
    - [[#corfu][corfu]]
  - [[#projectile][projectile]]
  - [[#eshell][eshell]]
    - [[#eat][eat]]
  - [[#languages][languages]]
    - [[#bazel][bazel]]
    - [[#gleam][gleam]]
    - [[#rust][rust]]
    - [[#nix][nix]]
    - [[#yaml][yaml]]
    - [[#scala][scala]]
    - [[#cue][cue]]
    - [[#gleam-1][gleam]]
    - [[#python-][python :(]]
    - [[#tsx][tsx]]
  - [[#envrc][envrc]]
- [[#refs][refs]]
- [[#org-settings][org settings]]

** setup
Setup for package management, literate config, etc

*** early-init
:PROPERTIES:
:header-args: :tangle-mode o444 :tangle early-init.el
:END:

#+begin_src emacs-lisp
  ;; This file is generate by readme.org. Do not edit manually!
#+end_src

**** performance hacks
Disable GC during startup

#+begin_src emacs-lisp
  (setq gc-cons-threshold most-positive-fixnum
        gc-cons-percentage 1
        warning-minimum-level :emergency)

  (defun +gc-after-focus-change ()
    "Run GC when frame loses focus."
    (run-with-idle-timer
     5 nil
     (lambda () (unless (frame-focus-state) (garbage-collect)))))
#+end_src

Reset init values after elpaca has loaded

#+begin_src emacs-lisp
  (defun +reset-init-values ()
    (run-with-idle-timer
     1 nil
     (lambda ()
       (setq ;;file-name-handler-alist default-file-name-handler-alist
        gc-cons-percentage 0.1
        gc-cons-threshold 100000000
        warning-minimum-level :warning)
       (when (boundp 'after-focus-change-function)
         (add-function :after after-focus-change-function #'+gc-after-focus-change)))))

  (with-eval-after-load 'elpaca
    (add-hook 'elpaca-after-init-hook '+reset-init-values))
#+end_src

**** package.el
Disable package.el, we'll use elpaca
#+begin_src emacs-lisp
  (setq package-enable-at-startup nil)
#+end_src

**** ui
Disable UI stuff. Doing it here keeps it from flashing on startup
#+begin_src emacs-lisp
  (setq initial-frame-alist
        '(
          (background-color . "#000000")
          (menu-bar-lines . 0)))

  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
#+end_src

Disable the fucking bell too

#+begin_src emacs-lisp
  (setq ring-bell-function #'ignore
        inhibit-startup-screen t)
#+end_src

*** org tangling
This tells emacs to automatically tangle all code blocks in this file when generating the code for the config

#+BEGIN_SRC :tangle no
header-args :tangle-mode o444 :tangle readme.el
#+END_SRC

*** install elpaca
Run the elpaca installation code; this is from the readme

#+begin_src emacs-lisp
  (defvar elpaca-installer-version 0.7)
  (defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
  (defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
  (defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
  (defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
                                :ref nil :depth 1
                                :files (:defaults "elpaca-test.el" (:exclude "extensions"))
                                :build (:not elpaca--activate-package)))
  (let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
         (build (expand-file-name "elpaca/" elpaca-builds-directory))
         (order (cdr elpaca-order))
         (default-directory repo))
    (add-to-list 'load-path (if (file-exists-p build) build repo))
    (unless (file-exists-p repo)
      (make-directory repo t)
      (when (< emacs-major-version 28) (require 'subr-x))
      (condition-case-unless-debug err
          (if-let ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
                   ((zerop (apply #'call-process `("git" nil ,buffer t "clone"
                                                   ,@(when-let ((depth (plist-get order :depth)))
                                                       (list (format "--depth=%d" depth) "--no-single-branch"))
                                                   ,(plist-get order :repo) ,repo))))
                   ((zerop (call-process "git" nil buffer t "checkout"
                                         (or (plist-get order :ref) "--"))))
                   (emacs (concat invocation-directory invocation-name))
                   ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
                                         "--eval" "(byte-recompile-directory \".\" 0 'force)")))
                   ((require 'elpaca))
                   ((elpaca-generate-autoloads "elpaca" repo)))
              (progn (message "%s" (buffer-string)) (kill-buffer buffer))
            (error "%s" (with-current-buffer buffer (buffer-string))))
        ((error) (warn "%s" err) (delete-directory repo 'recursive))))
    (unless (require 'elpaca-autoloads nil t)
      (require 'elpaca)
      (elpaca-generate-autoloads "elpaca" repo)
      (load "./elpaca-autoloads")))
  (add-hook 'after-init-hook #'elpaca-process-queues)
  (elpaca `(,@elpaca-order))

#+end_src

Use elpaca to install packages in use-package

#+begin_src emacs-lisp
  ;; Install use-package support
  (elpaca elpaca-use-package
    ;; Enable use-package :ensure support for Elpaca.
    (elpaca-use-package-mode)
    (setq elpaca-use-package-by-default t
          use-package-always-ensure t))


  ;; Block until current queue processed.
  (elpaca-wait)
#+end_src

use-feature macro

#+begin_src emacs-lisp
  (defmacro use-feature (name &rest args)
    "Like `use-package' but accounting for asynchronous installation.
    NAME and ARGS are in `use-package'."
    (declare (indent defun))
    `(use-package ,name
       :ensure nil
       ,@args))
#+end_src

** general
Install general; do this before other packages because we need to `elpaca-wait`. This adds the `:general` keyword to `use-package`.

#+begin_src emacs-lisp
  (use-package general
    :demand t
    :config
    (general-override-mode)
    (general-auto-unbind-keys)
    <<general-config>>)

  (elpaca-wait)
#+end_src

*** config
Code blocks in this section are injected into the general use-package at the <<general-config>>.
:PROPERTIES:
:header-args: :noweb-ref general-config
:END:

**** leader

Setup SPC as the leader

#+begin_src emacs-lisp :noweb-ref general-config
  (general-define-key
   :keymaps 'override
   :states '(insert normal hybrid motion visual operator emacs)
   :prefix-map '+prefix-map
   :prefix "SPC"
   :global-prefix "M-S-SPC"
   )

  (general-create-definer spc
    :wk-full-keys nil
    :keymaps '+prefix-map)

  (spc
    "SPC" 'execute-extended-command
    "u"   'universal-argument
    "/"   'occur
    "!"   'shell-command
    ":"   'eval-expression
    "."   'repeat
    "h"   (general-simulate-key "C-h" :which-key "help")
    "r"   'async-shell-command
    )

  (general-create-definer global-leader
    :keymaps 'override
    :states '(insert normal hybrid motion visual operator)
    :prefix "SPC m"
    :non-normal-prefix "M-S-SPC m"
    "" '( :ignore t
          :which-key
          (lambda (arg)
            (cons (cadr (split-string (car arg) " "))
                  (replace-regexp-in-string "-mode$" "" (symbol-name major-mode))))))
#+end_src

create spc-menu! to ease the creation of nested menu bindings

#+begin_src emacs-lisp :noweb-ref general-config :tangle no
  (defmacro spc-menu! (name prefix-key &rest body)
    "Create a definer named spc-KEY wrapping global-definer.
      Create prefix map: spc-KEY-map. Prefix bindings in BODY with PREFIX-KEY."
    (declare (indent 2))
    (let* ((n (concat "spc-" prefix-key))
           (prefix-map (intern (concat n "-map"))))
      `(progn
         (general-create-definer ,(intern n)
           :wrapping spc
           :prefix-map (quote ,prefix-map)
           :prefix ,prefix-key
           :wk-full-keys nil
           "" '(:ignore t :which-key ,name))
         (,(intern n) ,@body))))
#+end_src

**** buffers
#+begin_src emacs-lisp :noweb-ref general-config :tangle no
  (spc-menu! "buffer" "b"
    "d"  'kill-current-buffer
    "o" '((lambda () (interactive) (switch-to-buffer nil))
          :which-key "other-buffer")
    "p"  'previous-buffer
    "r"  'rename-buffer
    "R"  'revert-buffer
    "M" '((lambda () (interactive) (switch-to-buffer "*Messages*"))
          :which-key "messages-buffer")
    "n"  'next-buffer
    "s"  'scratch-buffer
    "TAB" '((lambda () (interactive) (switch-to-buffer nil))
            :which-key "other-buffer")
    )
#+end_src

**** files
#+begin_src emacs-lisp 
  (defun save-buffer-and-kill ()
    (interactive)
    (save-buffer)
    (kill-current-buffer))

  (spc-menu! "file" "f"
    "d"   '((lambda (&optional arg)
              (interactive "P")
              (let ((buffer (when arg (current-buffer))))
                (diff-buffer-with-file buffer)))
            :which-key "diff-with-file")
    "c" '((lambda () (interactive) (find-file (concat user-emacs-directory "readme.org")))
          :which-key "emacs-config-file")
    "e"   '(:ignore t :which-key "edit")
    "f"   'find-file
    "l"   '((lambda (&optional arg)
              (interactive "P")
              (call-interactively (if arg #'find-library-other-window #'find-library)))
            :which-key "+find-library")
    "p"   'find-function-at-point
    "P"   'find-function
    "R"   'rename-file-and-buffer
    "s"   'save-buffer
    "v"   'find-variable-at-point
    "V"   'find-variable
    "q"   'save-buffer-and-kill)
#+end_src

**** windows
#+begin_src emacs-lisp
  (spc-menu! "window" "w"
    "s" 'split-window-vertically
    "v" 'split-window-horizontally
    "=" 'balance-windows
    "O" 'delete-other-windows
    "X" '((lambda () (interactive) (call-interactively #'other-window) (kill-buffer-and-window))
          :which-key "kill-other-buffer-and-window")
    "d" 'delete-window
    "h" 'windmove-left
    "j" 'windmove-down
    "k" 'windmove-up
    "l" 'windmove-right
    "o" 'other-window
    "t" 'window-toggle-side-windows
    "m" 'delete-other-windows
    "."  '(:ingore :which-key "resize")
    ".h" '((lambda () (interactive)
             (call-interactively (if (window-prev-sibling) #'enlarge-window-horizontally
                                   #'shrink-window-horizontally)))
           :which-key "divider left")
    ".l" '((lambda () (interactive)
             (call-interactively (if (window-next-sibling) #'enlarge-window-horizontally
                                   #'shrink-window-horizontally)))
           :which-key "divider right")
    ".j" '((lambda () (interactive)
             (call-interactively (if (window-next-sibling) #'enlarge-window #'shrink-window)))
           :which-key "divider up")
    ".k" '((lambda () (interactive)
             (call-interactively (if (window-prev-sibling) #'enlarge-window #'shrink-window)))
           :which-key "divider down")
    "x" 'kill-buffer-and-window)
#+end_src

**** project
#+begin_src emacs-lisp
  (spc-menu! "project" "p")
#+end_src
**** quit
#+begin_src emacs-lisp
  (spc-menu! "quit" "q"
    "r" 'restart-emacs)
#+end_src

**** vim completion
#+begin_src emacs-lisp
  (general-create-definer completion-def
    :prefix "C-x")
#+end_src

**** backup files
#+begin_src emacs-lisp
  (defvar --backup-directory (concat user-emacs-directory "backups"))
  (if (not (file-exists-p --backup-directory))
      (make-directory --backup-directory t))
  (setq backup-directory-alist `(("." . ,--backup-directory)))
#+end_src
**

#+begin_src emacs-lisp
    ;;  (use-package ef-themes
    ;;    :init
    ;;    (load-theme 'ef-dark t)
    ;;    :custom-face
    ;;    (mode-line-active ((t (:box (:line-width 4 :color "#2a2a75")))))
    ;;    (mode-line-inactive ((t (:box (:line-width 4 :color "#2b2b2b")))))
    ;;    (mouse ((t (:background "#ff76ff"))))
    ;;    )
(let ((bg-active (face-attribute 'mode-line :background nil 'default))
      (bg-inactive (face-attribute 'mode-line-inactive :background nil 'default)))
  (set-face-attribute 'mode-line nil :box `(:line-width 4 :color ,bg-active))
  (set-face-attribute 'mode-line-inactive nil :box `(:line-width 4 :color ,bg-inactive)))
#+end_src


** evil
Install evil and related packages

#+begin_src emacs-lisp
  (use-package evil
    :custom
    (evil-want-keybinding nil)
    (evil-want-C-u-scroll t)
    (evil-want-C-d-scroll t)
    (evil-want-Y-yank-to-eol t)
    (evil-want-integration t)
    (evil-undo-system 'undo-redo)
    :config
    (spc-w
      "H" 'evil-window-move-far-left
      "J" 'evil-window-move-very-bottom
      "K" 'evil-window-move-very-top
      "L" 'evil-window-move-far-right
      )
    ;; don't bind RET or TAB
    (with-eval-after-load 'evil-maps
      (define-key evil-motion-state-map (kbd "SPC") nil)
      (define-key evil-motion-state-map (kbd "RET") nil)
      (define-key evil-motion-state-map (kbd "TAB") nil))
    (evil-mode)
    )
#+end_src

*** evil-collection
#+begin_src emacs-lisp
  (use-package evil-collection
    :after evil
    :ensure t
    :config
    (evil-collection-init)
    )
#+end_src

*** evil-surround
#+begin_src emacs-lisp
  (use-package evil-surround
    :after evil
    :ensure t
    :config
    (global-evil-surround-mode 1)
    )
#+end_src

** which-key
#+begin_src emacs-lisp
  (use-package which-key
    :config (which-key-mode)
    )
#+end_src

** emacs
#+begin_src emacs-lisp
  (use-feature emacs
    :demand t
    :custom
    (scroll-conservatively 101 "Scroll just enough to bring text into view")
    (enable-recursive-minibuffers t "Allow minibuffer commands in minibuffer")
    (frame-title-format '(buffer-file-name "%f" ("%b"))
                        "Make frame title current file's name.")
    (find-library-include-other-files nil)
    (indent-tabs-mode nil "Use spaces, not tabs")
    (inhibit-startup-screen t)
    (history-delete-duplicates t "Don't clutter history")
    (pgtk-use-im-context-on-new-connection nil "Prevent GTK from stealing Shift + Space")
    (sentence-end-double-space nil "Double space sentence demarcation breaks sentence navigation in Evil")
    (tab-stop-list (number-sequence 2 120 2))
    (tab-width 2 "Shorter tab widths")
    (completion-styles '(flex basic partial-completion emacs22))
    (blink-cursor-mode nil)
    )
#+end_src

*** ansi-mode
This makes compliation buffers under things like cargo and sbt pretty instead of filled with garbage ansi control characters
#+begin_src emacs-lisp
  (require 'ansi-color)
  (defun colorize-compilation-buffer ()
    (ansi-color-apply-on-region compilation-filter-start (point)))
  (add-hook 'compilation-filter-hook 'colorize-compilation-buffer)
#+end_src

** magit
Transient is included in emacs, but it's too old for magit - install it manually
#+begin_src emacs-lisp
  (use-package seq)
  (use-package transient :after seq)
#+end_src

#+begin_src emacs-lisp
  (use-package magit
    :after transient
    :general (spc "m" 'magit))
#+end_src

** org
toc-org, for the table of contents in this file
#+begin_src emacs-lisp
  (use-package toc-org
    :after org
    :init (add-hook 'org-mode-hook #'toc-org-mode))
#+end_src
** savehist
#+begin_src emacs-lisp
  (use-feature savehist
    :init
    (savehist-mode))
#+end_src

** vert&co
Install everything minad has written

*** vertico
#+begin_src emacs-lisp
  (use-package vertico
    :init (vertico-mode)
    )
#+end_src

ok this one is not minad but it's his rec
#+begin_src emacs-lisp
  (use-package orderless
    :init
    ;; Configure a custom style dispatcher (see the Consult wiki)
    ;; (setq orderless-style-dispatchers '(+orderless-consult-dispatch orderless-affix-dispatch)
    ;;       orderless-component-separator #'orderless-escapable-split-on-space)
    (setq completion-styles '(orderless basic)
          completion-category-defaults nil
          completion-category-overrides '((file (styles partial-completion)))))
#+end_src

*** consult
#+begin_src emacs-lisp
  (use-package consult
    :demand t
    :general
    (spc-b
      "b" 'consult-buffer)
    (spc-
     "b" 'consult-buffer-other-window)
    (spc-p
      "s" 'consult-ripgrep)
    ;;"ps" 'consult-ripgrep
    ;;"tp" 'consult-yank-from-kill-ring

    :config
    (setq consult-narrow-key "<"
          completion-in-region-function (lambda (&rest args)
                                          (apply (if vertico-mode
                                                     #'consult-completion-in-region
                                                   #'completion--in-region)
                                                 args)))
    )
#+end_src

*** marginalia
marginalia enables richer annotations in the minibuffer
#+begin_src emacs-lisp
  (use-package marginalia
    :init
    (marginalia-mode))
#+end_src

*** embark
#+begin_src emacs-lisp
  (use-package embark-consult)

  (use-package embark
    :after embark-consult
    :bind
    (("C-." . embark-act)))

  (use-package wgrep)
#+end_src

*** corfu
#+begin_src emacs-lisp
  (use-package corfu
    ;; Optional customizations
    :custom
    ;; (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
    (corfu-auto t)                 ;; Enable auto completion
    ;; (corfu-quit-at-boundary nil)   ;; Never quit at completion boundary
    ;; (corfu-quit-no-match nil)      ;; Never quit, even if there is no match
    ;; (corfu-preview-current nil)    ;; Disable current candidate preview
    ;; (corfu-preselect 'prompt)      ;; Preselect the prompt
    ;; (corfu-on-exact-match nil)     ;; Configure handling of exact matches

    ;; Enable Corfu only for certain modes. See also `global-corfu-modes'.
    ;; :hook ((prog-mode . corfu-mode)
    ;;        (shell-mode . corfu-mode)
    ;;        (eshell-mode . corfu-mode))

    ;; Recommended: Enable Corfu globally.  This is recommended since Dabbrev can
    ;; be used globally (M-/).  See also the customization variable
    ;; `global-corfu-modes' to exclude certain modes.
    :init
    (global-corfu-mode))
#+end_src
** projectile
#+begin_src emacs-lisp
  (use-package projectile)

  (use-package consult-projectile
    :after projectile
    :general
    (spc-p
      "f" 'consult-projectile))
#+end_src
** eshell
Show the current directory when inputting command
#+begin_src emacs-lisp
  (setq shell-command-prompt-show-cwd t)
#+end_src
Give *Shell* buffers a more informative name
#+begin_src emacs-lisp
  (defvar command-datetime-format "%Y-%m-%d %H:%M:%S")

  (defun command-datetime-string () (format-time-string command-datetime-format))

  (defun set-output-buffer-name (args)
    "Wraps `async-shell-command` to use a more informative output-buffer name"
    (let* ((command (car args))
           (time (command-datetime-string))
           (output-buffer (concat "*Shell [" time "] (Running) " command)))
      (list command output-buffer)))

  (advice-add 'async-shell-command :filter-args 'set-output-buffer-name)
#+end_src

After process has exited, rename the buffer with the exit code and put some metadata about when it exited in the buffer
#+begin_src emacs-lisp
  (defun process-callback (buffer process signal)
    (when (memq (process-status process) '(exit signal))
      (with-current-buffer buffer
        (rename-buffer (string-replace
                        "(Running)"
                        (concat "(Exit " (number-to-string (process-exit-status process)) ")")
                        (buffer-name)))
        (insert (propertize
                 (concat "\n~\n"
                         "~ Exited at " (command-datetime-string))
                 'font-lock-face 'font-lock-comment-face)))
      (shell-command-sentinel process signal)))

  (defun add-info-after-exit (orig-fun &rest args)
    (let* ((window (apply orig-fun args))
           (buffer (window-buffer window))
           (proc (get-buffer-process buffer)))
      (progn
        (when (process-live-p proc)
          (set-process-sentinel proc (apply-partially 'process-callback buffer)))
        window)))


  (advice-add 'async-shell-command :around 'add-info-after-exit)
#+end_src

Switch to the shell window after starting a command and switch to normal mode
#+begin_src emacs-lisp
  (defun select-window-normal-mode (window)
    (select-window window)
    (when bound-and-true-p evil-mode
          (evil-normal-state nil)))
  (advice-add 'async-shell-command :filter-return 'select-window-normal-mode)
#+end_src

Keybinds
#+begin_src emacs-lisp
  (use-feature eshell
    :preface
    (defalias 'eshell/f 'find-file)
    (defun eshell/clear ()
      "Clear the eshell buffer."
      (let ((inhibit-read-only t))
        (erase-buffer)
        (eshell-send-input)))

    :general
    (spc-menu! "buffer" "s"
      "e" 'eshell
      "s" '(switch-to-buffer (async-shell-command))
      )
    )

#+end_src

Make the pwd part of the prompt match the color of the cursor
#+begin_src emacs-lisp
(defun eshell-prompt ()
  "Custom Eshell prompt with PWD in the cursor's color."
  (let ((pwd-color (face-attribute 'cursor :background nil 'default))) ;; Get cursor color
    (concat
     (propertize (abbreviate-file-name (eshell/pwd)) 'face `(:foreground ,pwd-color)) ;; Apply color
     (propertize " $ " 'face 'default)))) ;; Normal prompt symbol

(setq eshell-prompt-function #'eshell-prompt)
(setq eshell-highlight-prompt nil) ;; Avoid double styling
#+end_src
*** eat
#+begin_src emacs-lisp
  (use-package eat
  :elpaca (eat :type git
         :host codeberg
         :repo "akib/emacs-eat"
         :files ("*.el" ("term" "term/*.el") "*.texi"
                 "*.ti" ("terminfo/e" "terminfo/e/*")
                 ("terminfo/65" "terminfo/65/*")
                 ("integration" "integration/*")
                 (:exclude ".dir-locals.el" "*-tests.el")))
  :config

  :hook (eshell-load-hook . eat-eshell-mode)
  )
#+end_src
** languages
Tree sitter list and installs. Items are added in language blocks. See https://www.masteringemacs.org/article/how-to-get-started-tree-sitter
#+begin_src emacs-lisp
  (setq treesit-language-source-alist
        '(
          <<tree-sitter-mapping>>
          ))

  (defun treesit-install-if-missing (lang)
    (unless (treesit-language-available-p lang)
      (treesit-install-language-grammar lang)))

  (mapc #'treesit-install-if-missing (mapcar #'car treesit-language-source-alist))

  (setq major-mode-remap-alist
        '((yaml-mode . yaml-ts-mode)
          (bash-mode . bash-ts-mode)
          (js2-mode . js-ts-mode)
          (typescript-mode . typescript-ts-mode)
          (json-mode . json-ts-mode)
          (css-mode . css-ts-mode)
          (gleam-mode . gleam-ts-mode)
          (python-mode . python-ts-mode)))
#+end_src

*** bazel
#+begin_src emacs-lisp
  (use-package bazel)
#+end_src

*** gleam
#+begin_src emacs-lisp :noweb-ref tree-sitter-mapping :tangle no
  (gleam "https://github.com/gleam-lang/tree-sitter-gleam")
#+end_src

*** rust
#+begin_src emacs-lisp
  (use-package rust-mode)
#+end_src
*** nix
#+begin_src emacs-lisp
  (use-package nix-mode
    )
#+end_src

*** yaml
#+begin_src emacs-lisp :noweb-ref tree-sitter-mapping :tangle no
  (yaml "https://github.com/ikatyang/tree-sitter-yaml")
#+end_src
#+begin_src emacs-lisp
(add-to-list 'auto-mode-alist '("\\.yaml\\'" . yaml-ts-mode))
#+end_src
*** scala
#+begin_src emacs-lisp
  (use-package scala-mode)
#+end_src
*** cue
#+begin_src emacs-lisp
  (use-package cue-mode
    )
#+end_src

*** gleam
#+begin_src emacs-lisp
  (use-package gleam-ts-mode
    :elpaca (gleam-ts-mode :host github :repo "gleam-lang/gleam-mode")
    )
#+end_src

*** python :(
#+begin_src emacs-lisp :noweb-ref tree-sitter-mapping :tangle no
  (python "https://github.com/tree-sitter/tree-sitter-python")
   #+end_src
   
Random code from the internet https://mclare.blog/posts/using-uv-in-emacs/
#+begin_src emacs-lisp
  (defun uv-activate ()
    "Activate Python environment managed by uv based on current project directory.
  Looks for .venv directory in project root and activates the Python interpreter."
    (interactive)
    (let* ((project-root (project-root (project-current t)))
           (venv-path (expand-file-name ".venv" project-root))
           (python-path (expand-file-name
                         (if (eq system-type 'windows-nt)
                             "Scripts/python.exe"
                           "bin/python")
                         venv-path)))
      (if (file-exists-p python-path)
          (progn
            ;; Set Python interpreter path
            (setq python-shell-interpreter python-path)

            ;; Update exec-path to include the venv's bin directory
            (let ((venv-bin-dir (file-name-directory python-path)))
              (setq exec-path (cons venv-bin-dir
                                    (remove venv-bin-dir exec-path))))

            ;; Update PATH environment variable
            (setenv "PATH" (concat (file-name-directory python-path)
                                   path-separator
                                   (getenv "PATH")))

            ;; Update VIRTUAL_ENV environment variable
            (setenv "VIRTUAL_ENV" venv-path)

            ;; Remove PYTHONHOME if it exists
            (setenv "PYTHONHOME" nil)

            (message "Activated UV Python environment at %s" venv-path))
        (error "No UV Python environment found in %s" project-root))))
#+end_src
   
*** tsx
#+begin_src emacs-lisp :noweb-ref tree-sitter-mapping :tangle no
  (tsx "https://github.com/tree-sitter/tree-sitter-typescript" "master" "tsx/src")
#+end_src

#+begin_src emacs-lisp
  (use-package tide
    :config
    (defun setup-tide-mode ()
      (interactive)
      (tide-setup)
      (flycheck-mode +1)
      (setq flycheck-check-syntax-automatically '(save mode-enabled))
      (eldoc-mode +1)
      (tide-hl-identifier-mode +1)
      ;; company is an optional dependency. You have to
      ;; install it separately via package-install
      ;; `M-x package-install [ret] company`
      ))

  (add-hook 'tsx-ts-mode-hook #'setup-tide-mode)

  (add-to-list 'auto-mode-alist '("\\.tsx\\'" . tsx-ts-mode))
#+end_src

** envrc
Intall envrc-mode and load it after init (per docs)

#+begin_src emacs-lisp
  (use-package envrc
    :hook (after-init . envrc-global-mode)
    :config (envrc-global-mode 1))
#+end_src


Sometimes need direnv-mode if you want it to be more global. Don't enable by default
#+begin_src emacs-lisp
  (use-package direnv
    :config
    ;; (direnv-mode)
    )
#+end_src

* refs
Places this config is stolen from:

https://github.com/progfolio/.emacs.d
https://github.com/frap/emacs-literate

* org settings
#+startup: show2levels
#+property: header-args :mkdirp yes :tangle-mode: #o444 :noweb yes
